
ros_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800493c  0800493c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800493c  0800493c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  20000084  080049cc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  080049cc  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d46e  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226d  00000000  00000000  0002d51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00030118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877a  00000000  00000000  00030a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3e2  00000000  00000000  00049182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089058  00000000  00000000  00053564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc5bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  000dc60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080046dc 	.word	0x080046dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080046dc 	.word	0x080046dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f8e6 	bl	8002330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a2 	bl	80002b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800016c:	f000 f87a 	bl	8000264 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8000170:	f000 f84a 	bl	8000208 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000174:	f001 f9ce 	bl	8001514 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    loop();
 8000178:	f001 f9dc 	bl	8001534 <loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f004 f91f 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ac:	2300      	movs	r3, #0
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fea3 	bl	8002f00 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	bf14      	ite	ne
 80001c0:	2301      	movne	r3, #1
 80001c2:	2300      	moveq	r3, #0
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8bd 	bl	8000348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f003 f90c 	bl	8003404 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	bf14      	ite	ne
 80001f2:	2301      	movne	r3, #1
 80001f4:	2300      	moveq	r3, #0
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80001fc:	f000 f8a4 	bl	8000348 <Error_Handler>
  }
}
 8000200:	bf00      	nop
 8000202:	3740      	adds	r7, #64	; 0x40
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 800020e:	4a14      	ldr	r2, [pc, #80]	; (8000260 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 800022e:	220c      	movs	r2, #12
 8000230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800023e:	4807      	ldr	r0, [pc, #28]	; (800025c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000240:	f003 fa78 	bl	8003734 <HAL_UART_Init>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	bf14      	ite	ne
 800024a:	2301      	movne	r3, #1
 800024c:	2300      	moveq	r3, #0
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000254:	f000 f878 	bl	8000348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200000a0 	.word	0x200000a0
 8000260:	40013800 	.word	0x40013800

08000264 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <_ZL11MX_DMA_Initv+0x48>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <_ZL11MX_DMA_Initv+0x48>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6153      	str	r3, [r2, #20]
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <_ZL11MX_DMA_Initv+0x48>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	200e      	movs	r0, #14
 8000288:	f002 f9af 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800028c:	200e      	movs	r0, #14
 800028e:	f002 f9c8 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2100      	movs	r1, #0
 8000296:	200f      	movs	r0, #15
 8000298:	f002 f9a7 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800029c:	200f      	movs	r0, #15
 800029e:	f002 f9c0 	bl	8002622 <HAL_NVIC_EnableIRQ>

}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000

080002b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <_ZL12MX_GPIO_Initv+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <_ZL12MX_GPIO_Initv+0x94>)
 8000314:	f002 fdc2 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <_ZL12MX_GPIO_Initv+0x94>)
 8000332:	f002 fc2f 	bl	8002b94 <HAL_GPIO_Init>

}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40011000 	.word	0x40011000

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000350:	e7fe      	b.n	8000350 <Error_Handler+0x8>

08000352 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4618      	mov	r0, r3
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <_ZN3ros3MsgC1Ev+0x1c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	08004914 	.word	0x08004914

08000394 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
      data()
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ffe8 	bl	8000374 <_ZN3ros3MsgC1Ev>
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3304      	adds	r3, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffcf 	bl	8000352 <_ZN3ros4TimeC1Ev>
    {
    }
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	080048fc 	.word	0x080048fc

080003c4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6859      	ldr	r1, [r3, #4]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	b2ca      	uxtb	r2, r1
 80003de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	0a19      	lsrs	r1, r3, #8
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	b2ca      	uxtb	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	0c19      	lsrs	r1, r3, #16
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3302      	adds	r3, #2
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	b2ca      	uxtb	r2, r1
 8000402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	0e19      	lsrs	r1, r3, #24
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3303      	adds	r3, #3
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	4413      	add	r3, r2
 8000412:	b2ca      	uxtb	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3304      	adds	r3, #4
 800041a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6899      	ldr	r1, [r3, #8]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	4413      	add	r3, r2
 8000426:	b2ca      	uxtb	r2, r1
 8000428:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	0a19      	lsrs	r1, r3, #8
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	4413      	add	r3, r2
 8000438:	b2ca      	uxtb	r2, r1
 800043a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	0c19      	lsrs	r1, r3, #16
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3302      	adds	r3, #2
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	4413      	add	r3, r2
 800044a:	b2ca      	uxtb	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	0e19      	lsrs	r1, r3, #24
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3303      	adds	r3, #3
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	4413      	add	r3, r2
 800045c:	b2ca      	uxtb	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3304      	adds	r3, #4
 8000464:	60fb      	str	r3, [r7, #12]
      return offset;
 8000466:	68fb      	ldr	r3, [r7, #12]
    }
 8000468:	4618      	mov	r0, r3
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3301      	adds	r3, #1
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	440b      	add	r3, r1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3302      	adds	r3, #2
 80004ac:	6839      	ldr	r1, [r7, #0]
 80004ae:	440b      	add	r3, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	041b      	lsls	r3, r3, #16
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3303      	adds	r3, #3
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	440b      	add	r3, r1
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	061b      	lsls	r3, r3, #24
 80004ca:	431a      	orrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3304      	adds	r3, #4
 80004d4:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689a      	ldr	r2, [r3, #8]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	6839      	ldr	r1, [r7, #0]
 80004ee:	440b      	add	r3, r1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	021b      	lsls	r3, r3, #8
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3302      	adds	r3, #2
 8000502:	6839      	ldr	r1, [r7, #0]
 8000504:	440b      	add	r3, r1
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	041b      	lsls	r3, r3, #16
 800050a:	431a      	orrs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3303      	adds	r3, #3
 8000518:	6839      	ldr	r1, [r7, #0]
 800051a:	440b      	add	r3, r1
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	061b      	lsls	r3, r3, #24
 8000520:	431a      	orrs	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3304      	adds	r3, #4
 800052a:	60fb      	str	r3, [r7, #12]
     return offset;
 800052c:	68fb      	ldr	r3, [r7, #12]
    }
 800052e:	4618      	mov	r0, r3
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	080046f4 	.word	0x080046f4

08000550 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	08004704 	.word	0x08004704

08000568 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fefe 	bl	8000374 <_ZN3ros3MsgC1Ev>
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	809a      	strh	r2, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
    {
    }
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	080048e4 	.word	0x080048e4
 80005ac:	08004728 	.word	0x08004728

080005b0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	8899      	ldrh	r1, [r3, #4]
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	b2ca      	uxtb	r2, r1
 80005ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	889b      	ldrh	r3, [r3, #4]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b299      	uxth	r1, r3
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	3301      	adds	r3, #1
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	b2ca      	uxtb	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	3302      	adds	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdae 	bl	800014c <strlen>
 80005f0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ffbc 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3304      	adds	r3, #4
 8000604:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	18d0      	adds	r0, r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	69ba      	ldr	r2, [r7, #24]
 8000612:	4619      	mov	r1, r3
 8000614:	f003 fece 	bl	80043b4 <memcpy>
      offset += length_topic_name;
 8000618:	69fa      	ldr	r2, [r7, #28]
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	4413      	add	r3, r2
 800061e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fd91 	bl	800014c <strlen>
 800062a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	6979      	ldr	r1, [r7, #20]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ff9f 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3304      	adds	r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	18d0      	adds	r0, r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4619      	mov	r1, r3
 800064e:	f003 feb1 	bl	80043b4 <memcpy>
      offset += length_message_type;
 8000652:	69fa      	ldr	r2, [r7, #28]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fd74 	bl	800014c <strlen>
 8000664:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	6939      	ldr	r1, [r7, #16]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff82 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3304      	adds	r3, #4
 8000678:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	18d0      	adds	r0, r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	4619      	mov	r1, r3
 8000688:	f003 fe94 	bl	80043b4 <memcpy>
      offset += length_md5sum;
 800068c:	69fa      	ldr	r2, [r7, #28]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4413      	add	r3, r2
 8000692:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800069a:	68f9      	ldr	r1, [r7, #12]
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	b2ca      	uxtb	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	0a19      	lsrs	r1, r3, #8
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3301      	adds	r3, #1
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	0c19      	lsrs	r1, r3, #16
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3302      	adds	r3, #2
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	b2ca      	uxtb	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	0e19      	lsrs	r1, r3, #24
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3303      	adds	r3, #3
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	61fb      	str	r3, [r7, #28]
      return offset;
 80006dc:	69fb      	ldr	r3, [r7, #28]
    }
 80006de:	4618      	mov	r0, r3
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	889b      	ldrh	r3, [r3, #4]
 8000706:	b21a      	sxth	r2, r3
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	3301      	adds	r3, #1
 800070c:	6839      	ldr	r1, [r7, #0]
 800070e:	440b      	add	r3, r1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	3302      	adds	r3, #2
 8000724:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	441a      	add	r2, r3
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ff3d 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	3304      	adds	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	4413      	add	r3, r2
 8000748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074a:	429a      	cmp	r2, r3
 800074c:	d20c      	bcs.n	8000768 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	441a      	add	r2, r3
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	3b01      	subs	r3, #1
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	440b      	add	r3, r1
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	3301      	adds	r3, #1
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
 8000766:	e7ec      	b.n	8000742 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	3b01      	subs	r3, #1
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	4413      	add	r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	3b01      	subs	r3, #1
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	441a      	add	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	4413      	add	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	441a      	add	r2, r3
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f000 ff0a 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	3304      	adds	r3, #4
 80007a2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	4413      	add	r3, r2
 80007ae:	6a3a      	ldr	r2, [r7, #32]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d20c      	bcs.n	80007ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	441a      	add	r2, r3
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	3b01      	subs	r3, #1
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	440b      	add	r3, r1
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	3301      	adds	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
 80007cc:	e7ec      	b.n	80007a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	3b01      	subs	r3, #1
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	441a      	add	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4413      	add	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	441a      	add	r2, r3
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fed7 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	3304      	adds	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	61fb      	str	r3, [r7, #28]
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	69fa      	ldr	r2, [r7, #28]
 8000816:	429a      	cmp	r2, r3
 8000818:	d20c      	bcs.n	8000834 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	441a      	add	r2, r3
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3b01      	subs	r3, #1
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	440b      	add	r3, r1
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3301      	adds	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e7ec      	b.n	800080e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	3b01      	subs	r3, #1
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	3b01      	subs	r3, #1
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	441a      	add	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	440a      	add	r2, r1
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	4313      	orrs	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	3301      	adds	r3, #1
 8000870:	6839      	ldr	r1, [r7, #0]
 8000872:	440b      	add	r3, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	4313      	orrs	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	3302      	adds	r3, #2
 8000882:	6839      	ldr	r1, [r7, #0]
 8000884:	440b      	add	r3, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	4313      	orrs	r3, r2
 800088c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	3303      	adds	r3, #3
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	440b      	add	r3, r1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	061b      	lsls	r3, r3, #24
 800089c:	4313      	orrs	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	3304      	adds	r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
     return offset;
 80008ac:	69bb      	ldr	r3, [r7, #24]
    }
 80008ae:	4618      	mov	r0, r3
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	0800472c 	.word	0x0800472c

080008d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	08004748 	.word	0x08004748

080008e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fd3e 	bl	8000374 <_ZN3ros3MsgC1Ev>
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000908:	609a      	str	r2, [r3, #8]
    {
    }
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	080048cc 	.word	0x080048cc
 8000918:	08004728 	.word	0x08004728

0800091c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	7912      	ldrb	r2, [r2, #4]
 8000934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3301      	adds	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc03 	bl	800014c <strlen>
 8000946:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fe11 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3304      	adds	r3, #4
 800095a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	18d0      	adds	r0, r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	4619      	mov	r1, r3
 800096a:	f003 fd23 	bl	80043b4 <memcpy>
      offset += length_msg;
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
      return offset;
 8000976:	68fb      	ldr	r3, [r7, #12]
    }
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3301      	adds	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	441a      	add	r2, r3
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fe00 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	3304      	adds	r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d20c      	bcs.n	80009e2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	441a      	add	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	440b      	add	r3, r1
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e7ec      	b.n	80009bc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	3b01      	subs	r3, #1
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	441a      	add	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
     return offset;
 8000a06:	693b      	ldr	r3, [r7, #16]
    }
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	0800476c 	.word	0x0800476c

08000a28 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	08004780 	.word	0x08004780

08000a40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fc92 	bl	8000374 <_ZN3ros3MsgC1Ev>
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	080048b4 	.word	0x080048b4

08000a9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6859      	ldr	r1, [r3, #4]
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2ca      	uxtb	r2, r1
 8000ab6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	0a19      	lsrs	r1, r3, #8
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	0c19      	lsrs	r1, r3, #16
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	0e19      	lsrs	r1, r3, #24
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3303      	adds	r3, #3
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	3304      	adds	r3, #4
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	6a3a      	ldr	r2, [r7, #32]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d22b      	bcs.n	8000b5a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000b10:	6939      	ldr	r1, [r7, #16]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	b2ca      	uxtb	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	0a19      	lsrs	r1, r3, #8
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	3301      	adds	r3, #1
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2ca      	uxtb	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	0c19      	lsrs	r1, r3, #16
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	3302      	adds	r3, #2
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	0e19      	lsrs	r1, r3, #24
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	3303      	adds	r3, #3
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	3304      	adds	r3, #4
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	3301      	adds	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	e7ce      	b.n	8000af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6919      	ldr	r1, [r3, #16]
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	b2ca      	uxtb	r2, r1
 8000b66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	0a19      	lsrs	r1, r3, #8
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	0c19      	lsrs	r1, r3, #16
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3302      	adds	r3, #2
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	0e19      	lsrs	r1, r3, #24
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	3303      	adds	r3, #3
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d22b      	bcs.n	8000c0a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2ca      	uxtb	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	0a19      	lsrs	r1, r3, #8
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	0c19      	lsrs	r1, r3, #16
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	3302      	adds	r3, #2
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	b2ca      	uxtb	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	0e19      	lsrs	r1, r3, #24
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	3303      	adds	r3, #3
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	3304      	adds	r3, #4
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	e7ce      	b.n	8000ba8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69d9      	ldr	r1, [r3, #28]
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	b2ca      	uxtb	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	0a19      	lsrs	r1, r3, #8
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	3301      	adds	r3, #1
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	0c19      	lsrs	r1, r3, #16
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3302      	adds	r3, #2
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2ca      	uxtb	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	0e19      	lsrs	r1, r3, #24
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3303      	adds	r3, #3
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3304      	adds	r3, #4
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d228      	bcs.n	8000cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fa6c 	bl	800014c <strlen>
 8000c74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	6979      	ldr	r1, [r7, #20]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fc7a 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	3304      	adds	r3, #4
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	18d0      	adds	r0, r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f003 fb88 	bl	80043b4 <memcpy>
      offset += length_stringsi;
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	4413      	add	r3, r2
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e7d1      	b.n	8000c58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b08e      	sub	sp, #56	; 0x38
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	3301      	adds	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	6a3a      	ldr	r2, [r7, #32]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cea:	3302      	adds	r3, #2
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	6a3a      	ldr	r2, [r7, #32]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	061b      	lsls	r3, r3, #24
 8000d06:	6a3a      	ldr	r2, [r7, #32]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0e:	3304      	adds	r3, #4
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	6a3a      	ldr	r2, [r7, #32]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d90a      	bls.n	8000d32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4619      	mov	r1, r3
 8000d26:	4610      	mov	r0, r2
 8000d28:	f003 fb5a 	bl	80043e0 <realloc>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d236      	bcs.n	8000db4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	440a      	add	r2, r1
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	440b      	add	r3, r1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	4313      	orrs	r3, r2
 8000d68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6e:	3302      	adds	r3, #2
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	440b      	add	r3, r1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	041b      	lsls	r3, r3, #16
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d80:	3303      	adds	r3, #3
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	440b      	add	r3, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d96:	3304      	adds	r3, #4
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	3301      	adds	r3, #1
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
 8000db2:	e7c3      	b.n	8000d3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	041b      	lsls	r3, r3, #16
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de4:	3303      	adds	r3, #3
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	061b      	lsls	r3, r3, #24
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	3304      	adds	r3, #4
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d90a      	bls.n	8000e1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4610      	mov	r0, r2
 8000e10:	f003 fae6 	bl	80043e0 <realloc>
 8000e14:	4602      	mov	r2, r0
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d236      	bcs.n	8000e9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	440a      	add	r2, r1
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e44:	3301      	adds	r3, #1
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e56:	3302      	adds	r3, #2
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3303      	adds	r3, #3
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	061b      	lsls	r3, r3, #24
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7e:	3304      	adds	r3, #4
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	3214      	adds	r2, #20
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	3301      	adds	r3, #1
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9a:	e7c3      	b.n	8000e24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eba:	3302      	adds	r3, #2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ecc:	3303      	adds	r3, #3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ede:	3304      	adds	r3, #4
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d90a      	bls.n	8000f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f003 fa72 	bl	80043e0 <realloc>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d23f      	bcs.n	8000f96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	441a      	add	r2, r3
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fb45 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d20c      	bcs.n	8000f58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	441a      	add	r2, r3
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6839      	ldr	r1, [r7, #0]
 8000f4a:	440b      	add	r3, r1
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3301      	adds	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
 8000f56:	e7ec      	b.n	8000f32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	441a      	add	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	3220      	adds	r2, #32
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	3301      	adds	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f94:	e7ba      	b.n	8000f0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8000f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	08004850 	.word	0x08004850

08000fb8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	080047a4 	.word	0x080047a4

08000fd0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68d8      	ldr	r0, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6891      	ldr	r1, [r2, #8]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
  };
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
  }
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <_ZN13STM32HardwareC1Ev+0x34>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000a0 	.word	0x200000a0

08001098 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f804 	bl	80010ae <_ZN13STM32Hardware10reset_rbufEv>
    }
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	4619      	mov	r1, r3
 80010c4:	f002 fbf0 	bl	80038a8 <HAL_UART_Receive_DMA>
    }
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ffa8 	bl	800103a <_ZN13STM32Hardware10getRdmaIndEv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	429c      	cmp	r4, r3
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001100:	1c59      	adds	r1, r3, #1
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	791b      	ldrb	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001120:	68fb      	ldr	r3, [r7, #12]
    }
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
	...

0800112c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	d108      	bne.n	8001154 <_ZN13STM32Hardware5flushEv+0x28>
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_ZN13STM32Hardware5flushEv+0x28>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <_ZN13STM32Hardware5flushEv+0x2a>
 8001154:	2300      	movs	r3, #0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d03f      	beq.n	80011da <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800116c:	429a      	cmp	r2, r3
 800116e:	d031      	beq.n	80011d4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800117c:	429a      	cmp	r2, r3
 800117e:	d20a      	bcs.n	8001196 <_ZN13STM32Hardware5flushEv+0x6a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800118e:	b29b      	uxth	r3, r3
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	e006      	b.n	80011a4 <_ZN13STM32Hardware5flushEv+0x78>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800119c:	b29b      	uxth	r3, r3
 800119e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	89fa      	ldrh	r2, [r7, #14]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fb08 	bl	80037d0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	4413      	add	r3, r2
 80011ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
      }
    }
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000016c 	.word	0x2000016c

080011e8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
      int n = length;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fe:	bfa8      	it	ge
 8001200:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001204:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800120c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4293      	cmp	r3, r2
 8001214:	bf28      	it	cs
 8001216:	4613      	movcs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001220:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f8c1 	bl	80043b4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	429a      	cmp	r2, r3
 800124c:	d00b      	beq.n	8001266 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	18d1      	adds	r1, r2, r3
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	461a      	mov	r2, r3
 8001262:	f003 f8a7 	bl	80043b4 <memcpy>
      }

      flush();
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff ff60 	bl	800112c <_ZN13STM32Hardware5flushEv>
    }
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	f001 f8b0 	bl	80023e0 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
      data("")
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f86c 	bl	8000374 <_ZN3ros3MsgC1Ev>
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_ZN8std_msgs6StringC1Ev+0x28>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80012a6:	605a      	str	r2, [r3, #4]
    {
    }
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08004888 	.word	0x08004888
 80012b8:	08004728 	.word	0x08004728

080012bc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ff3c 	bl	800014c <strlen>
 80012d4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f94a 	bl	8001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3304      	adds	r3, #4
 80012e8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	18d0      	adds	r0, r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f003 f85c 	bl	80043b4 <memcpy>
      offset += length_data;
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
      return offset;
 8001304:	68fb      	ldr	r3, [r7, #12]
    }
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	441a      	add	r2, r3
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f942 	bl	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3304      	adds	r3, #4
 8001332:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	d20c      	bcs.n	800135e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	441a      	add	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3b01      	subs	r3, #1
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	440b      	add	r3, r1
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e7ec      	b.n	8001338 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	3b01      	subs	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	3b01      	subs	r3, #1
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	441a      	add	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
     return offset;
 8001382:	693b      	ldr	r3, [r7, #16]
    }
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	080047c8 	.word	0x080047c8

080013a4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	080047d8 	.word	0x080047d8

080013bc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	080048a0 	.word	0x080048a0

080013dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffe8 	bl	80013bc <_ZN3ros15NodeHandleBase_C1Ev>
 80013ec:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe32 	bl	8001060 <_ZN13STM32HardwareC1Ev>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f002 ffd1 	bl	80043d0 <memset>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ffc8 	bl	80043d0 <memset>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001446:	2264      	movs	r2, #100	; 0x64
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ffc0 	bl	80043d0 <memset>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f002 ffb8 	bl	80043d0 <memset>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fac2 	bl	8000a40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08004874 	.word	0x08004874

080014cc <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_TxCpltCallback+0x20>)
 80014d6:	f000 f890 	bl	80015fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014da:	4603      	mov	r3, r0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe25 	bl	800112c <_ZN13STM32Hardware5flushEv>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000170 	.word	0x20000170

080014f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_UART_RxCpltCallback+0x20>)
 80014fa:	f000 f87e 	bl	80015fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014fe:	4603      	mov	r3, r0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fdd4 	bl	80010ae <_ZN13STM32Hardware10reset_rbufEv>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000170 	.word	0x20000170

08001514 <setup>:

void setup(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  nh.initNode();
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <setup+0x18>)
 800151a:	f000 f879 	bl	8001610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800151e:	4904      	ldr	r1, [pc, #16]	; (8001530 <setup+0x1c>)
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <setup+0x18>)
 8001522:	f000 f892 	bl	800164a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000170 	.word	0x20000170
 8001530:	20000ab4 	.word	0x20000ab4

08001534 <loop>:

void loop(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <loop+0x30>)
 800153e:	f001 fcc5 	bl	8002ecc <HAL_GPIO_TogglePin>

  str_msg.data = hello;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <loop+0x34>)
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <loop+0x38>)
 8001546:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <loop+0x34>)
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <loop+0x3c>)
 800154c:	f7ff fd56 	bl	8000ffc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <loop+0x40>)
 8001552:	f000 f8a9 	bl	80016a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8001556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155a:	f000 ff4b 	bl	80023f4 <HAL_Delay>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40011000 	.word	0x40011000
 8001568:	20000aac 	.word	0x20000aac
 800156c:	20000000 	.word	0x20000000
 8001570:	20000ab4 	.word	0x20000ab4
 8001574:	20000170 	.word	0x20000170

08001578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d80d      	bhi.n	80015a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	fa22 f103 	lsr.w	r1, r2, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e7ee      	b.n	8001586 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d811      	bhi.n	80015f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	440a      	add	r2, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	4611      	mov	r1, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	00d2      	lsls	r2, r2, #3
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e7ea      	b.n	80015c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
  }
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3304      	adds	r3, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fd3b 	bl	8001098 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b18      	cmp	r3, #24
 800165c:	dc1e      	bgt.n	800169c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d111      	bne.n	8001694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	60da      	str	r2, [r3, #12]
        return true;
 8001690:	2301      	movs	r3, #1
 8001692:	e004      	b.n	800169e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e7dd      	b.n	8001658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800169c:	2300      	movs	r3, #0
  }
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fddd 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 80016ba:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d903      	bls.n	80016d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d903      	bls.n	80016f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001702:	2b00      	cmp	r3, #0
 8001704:	d014      	beq.n	8001730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fdb2 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800171c:	429a      	cmp	r2, r3
 800171e:	bf8c      	ite	hi
 8001720:	2301      	movhi	r3, #1
 8001722:	2300      	movls	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 800172a:	f06f 0301 	mvn.w	r3, #1
 800172e:	e1a5      	b.n	8001a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fccb 	bl	80010d0 <_ZN13STM32Hardware4readEv>
 800173a:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f2c0 8178 	blt.w	8001a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	441a      	add	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800175a:	2b07      	cmp	r3, #7
 800175c:	d11e      	bne.n	800179c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1b4      	bne.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2208      	movs	r2, #8
 8001796:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800179a:	e7af      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d128      	bne.n	80017f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2bff      	cmp	r3, #255	; 0xff
 80017aa:	d10d      	bne.n	80017c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f103 0214 	add.w	r2, r3, #20
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80017c6:	e799      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fd51 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf8c      	ite	hi
 80017e0:	2301      	movhi	r3, #1
 80017e2:	2300      	movls	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d088      	beq.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80017f2:	f06f 0301 	mvn.w	r3, #1
 80017f6:	e141      	b.n	8001a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d118      	bne.n	8001834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2bfe      	cmp	r3, #254	; 0xfe
 8001806:	d107      	bne.n	8001818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001816:	e771      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001826:	2b00      	cmp	r3, #0
 8001828:	f47f af68 	bne.w	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f929 	bl	8001a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001832:	e763      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800183a:	2b02      	cmp	r3, #2
 800183c:	d113      	bne.n	8001866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001864:	e74a      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800186c:	2b03      	cmp	r3, #3
 800186e:	d110      	bne.n	8001892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001890:	e734      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001898:	2b04      	cmp	r3, #4
 800189a:	d116      	bne.n	80018ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80018a2:	425a      	negs	r2, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	bf58      	it	pl
 80018aa:	4253      	negpl	r3, r2
 80018ac:	2bff      	cmp	r3, #255	; 0xff
 80018ae:	d107      	bne.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018be:	e71d      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018c8:	e718      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10f      	bne.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80018f2:	e703      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d117      	bne.n	800192e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	441a      	add	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2207      	movs	r2, #7
 8001914:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f aeec 	bne.w	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2208      	movs	r2, #8
 8001928:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800192c:	e6e6      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001934:	2b08      	cmp	r3, #8
 8001936:	f47f aee1 	bne.w	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001948:	425a      	negs	r2, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	bf58      	it	pl
 8001950:	4253      	negpl	r3, r2
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	f47f aed2 	bne.w	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d110      	bne.n	8001984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f88e 	bl	8001a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f8a9 	bl	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001982:	e07b      	b.n	8001a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800198a:	2b0a      	cmp	r3, #10
 800198c:	d109      	bne.n	80019a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 800198e:	2301      	movs	r3, #1
 8001990:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f970 	bl	8001c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80019a0:	e6ac      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d10e      	bne.n	80019ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7ff f97f 	bl	8000cbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80019c8:	e698      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019d0:	2b0b      	cmp	r3, #11
 80019d2:	d106      	bne.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]
 80019e0:	e68c      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019e8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f43f ae80 	beq.w	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a02:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a0c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a16:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4798      	blx	r3
    while (true)
 8001a32:	e663      	b.n	80016fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8001a34:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00f      	beq.n	8001a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d906      	bls.n	8001a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f816 	bl	8001a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8001a60:	7dbb      	ldrb	r3, [r7, #22]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 8001a66:	f06f 0303 	mvn.w	r3, #3
 8001a6a:	e006      	b.n	8001a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8001a72:	f06f 0302 	mvn.w	r3, #2
 8001a76:	e000      	b.n	8001a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	bf00      	nop
  }
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fc7f 	bl	8000394 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    rt_time = hardware_.time();
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fbe2 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd4b 	bl	8000568 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	2b18      	cmp	r3, #24
 8001ada:	dc63      	bgt.n	8001ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d056      	beq.n	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3308      	adds	r3, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	4798      	blx	r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4798      	blx	r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681c      	ldr	r4, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fa4a 	bl	8001024 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001b90:	4601      	mov	r1, r0
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	461a      	mov	r2, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e798      	b.n	8001ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	dc5f      	bgt.n	8001c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d053      	beq.n	8001c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4798      	blx	r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	330c      	adds	r3, #12
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4608      	mov	r0, r1
 8001c26:	4798      	blx	r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c30:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681c      	ldr	r4, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4608      	mov	r0, r1
 8001c58:	4798      	blx	r3
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	461a      	mov	r2, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	e79c      	b.n	8001ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001c76:	bf00      	nop
 8001c78:	372c      	adds	r7, #44	; 0x2c
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
	...

08001c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fb80 	bl	8000394 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff faeb 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fbde 	bl	8000472 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4915      	ldr	r1, [pc, #84]	; (8001d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001cbc:	fba1 1303 	umull	r1, r3, r1, r3
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001cc6:	6939      	ldr	r1, [r7, #16]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001ccc:	fba3 0302 	umull	r0, r3, r3, r2
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd6:	fb00 f303 	mul.w	r3, r0, r3
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	3304      	adds	r3, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8a6 	bl	8001e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fabb 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	10624dd3 	.word	0x10624dd3
 8001d14:	000f4240 	.word	0x000f4240

08001d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b63      	cmp	r3, #99	; 0x63
 8001d28:	dd09      	ble.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e079      	b.n	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001d4a:	3207      	adds	r2, #7
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
 8001d52:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	22fe      	movs	r2, #254	; 0xfe
 8001d60:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	121b      	asrs	r3, r3, #8
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001db6:	2305      	movs	r3, #5
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3306      	adds	r3, #6
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dc0d      	bgt.n	8001de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	e7ec      	b.n	8001dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3307      	adds	r3, #7
 8001de4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	425a      	negs	r2, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	bf58      	it	pl
 8001df0:	4253      	negpl	r3, r2
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1c59      	adds	r1, r3, #1
 8001df8:	6179      	str	r1, [r7, #20]
 8001dfa:	43d2      	mvns	r2, r2
 8001dfc:	b2d1      	uxtb	r1, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	460a      	mov	r2, r1
 8001e04:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0e:	dc0a      	bgt.n	8001e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1d18      	adds	r0, r3, #4
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7ff f9e3 	bl	80011e8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	e005      	b.n	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001e26:	4905      	ldr	r1, [pc, #20]	; (8001e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f849 	bl	8001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	080047fc 	.word	0x080047fc

08001e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fa10 	bl	8001274 <_ZN13STM32Hardware4timeEv>
 8001e54:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4915      	ldr	r1, [pc, #84]	; (8001eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e5e:	fba1 1303 	umull	r1, r3, r1, r3
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e76:	fba3 0302 	umull	r0, r3, r3, r2
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e80:	fb00 f303 	mul.w	r3, r0, r3
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	1aca      	subs	r2, r1, r3
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001e90:	4413      	add	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 f9f0 	bl	800228c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	10624dd3 	.word	0x10624dd3
 8001eb8:	000f4240 	.word	0x000f4240
 8001ebc:	3b9aca00 	.word	0x3b9aca00

08001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	2103      	movs	r1, #3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f804 	bl	8001edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fcfa 	bl	80008e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f107 0214 	add.w	r2, r7, #20
 8001f06:	2107      	movs	r1, #7
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	4798      	blx	r3
  }
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_Z41__static_initialization_and_destruction_0ii>:
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d110      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10b      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001f30:	f7ff fa54 	bl	80013dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f36:	f7ff f9a9 	bl	800128c <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f3e:	4906      	ldr	r1, [pc, #24]	; (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f42:	f7ff f845 	bl	8000fd0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000170 	.word	0x20000170
 8001f54:	20000aac 	.word	0x20000aac
 8001f58:	08004838 	.word	0x08004838
 8001f5c:	20000ab4 	.word	0x20000ab4

08001f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    return configured_;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_GLOBAL__sub_I_nh>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff ffc7 	bl	8001f14 <_Z41__static_initialization_and_destruction_0ii>
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6193      	str	r3, [r2, #24]
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_MspInit+0x5c>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_MspInit+0x60>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_MspInit+0x60>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000

08001fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_UART_MspInit+0x13c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	f040 8088 	bne.w	800211e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_UART_MspInit+0x140>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a46      	ldr	r2, [pc, #280]	; (800212c <HAL_UART_MspInit+0x140>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_UART_MspInit+0x140>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_UART_MspInit+0x140>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_UART_MspInit+0x140>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_UART_MspInit+0x140>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4837      	ldr	r0, [pc, #220]	; (8002130 <HAL_UART_MspInit+0x144>)
 8002054:	f000 fd9e 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	4830      	ldr	r0, [pc, #192]	; (8002130 <HAL_UART_MspInit+0x144>)
 800206e:	f000 fd91 	bl	8002b94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_UART_MspInit+0x148>)
 8002074:	4a30      	ldr	r2, [pc, #192]	; (8002138 <HAL_UART_MspInit+0x14c>)
 8002076:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_UART_MspInit+0x148>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_UART_MspInit+0x148>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_UART_MspInit+0x148>)
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_UART_MspInit+0x148>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_UART_MspInit+0x148>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002096:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_UART_MspInit+0x148>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_UART_MspInit+0x148>)
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020a4:	4823      	ldr	r0, [pc, #140]	; (8002134 <HAL_UART_MspInit+0x148>)
 80020a6:	f000 fad7 	bl	8002658 <HAL_DMA_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80020b0:	f7fe f94a 	bl	8000348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_UART_MspInit+0x148>)
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_UART_MspInit+0x148>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_UART_MspInit+0x150>)
 80020c2:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <HAL_UART_MspInit+0x154>)
 80020c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_UART_MspInit+0x150>)
 80020c8:	2210      	movs	r2, #16
 80020ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_UART_MspInit+0x150>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_UART_MspInit+0x150>)
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_UART_MspInit+0x150>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_UART_MspInit+0x150>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0x150>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_UART_MspInit+0x150>)
 80020ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020f2:	4812      	ldr	r0, [pc, #72]	; (800213c <HAL_UART_MspInit+0x150>)
 80020f4:	f000 fab0 	bl	8002658 <HAL_DMA_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80020fe:	f7fe f923 	bl	8000348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_UART_MspInit+0x150>)
 8002106:	635a      	str	r2, [r3, #52]	; 0x34
 8002108:	4a0c      	ldr	r2, [pc, #48]	; (800213c <HAL_UART_MspInit+0x150>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2025      	movs	r0, #37	; 0x25
 8002114:	f000 fa69 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002118:	2025      	movs	r0, #37	; 0x25
 800211a:	f000 fa82 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40013800 	.word	0x40013800
 800212c:	40021000 	.word	0x40021000
 8002130:	40010800 	.word	0x40010800
 8002134:	200000e4 	.word	0x200000e4
 8002138:	40020058 	.word	0x40020058
 800213c:	20000128 	.word	0x20000128
 8002140:	40020044 	.word	0x40020044

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f000 f917 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA1_Channel4_IRQHandler+0x10>)
 800219a:	f000 fbc7 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000128 	.word	0x20000128

080021a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA1_Channel5_IRQHandler+0x10>)
 80021ae:	f000 fbbd 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200000e4 	.word	0x200000e4

080021bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <USART1_IRQHandler+0x10>)
 80021c2:	f001 fba1 	bl	8003908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200000a0 	.word	0x200000a0

080021d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <_kill>:

int _kill(int pid, int sig)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021e8:	f002 f8ba 	bl	8004360 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2216      	movs	r2, #22
 80021f0:	601a      	str	r2, [r3, #0]
	return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_exit>:

void _exit (int status)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002206:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffe7 	bl	80021de <_kill>
	while (1) {}		/* Make sure we hang here */
 8002210:	e7fe      	b.n	8002210 <_exit+0x12>
	...

08002214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <_sbrk+0x5c>)
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <_sbrk+0x60>)
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_sbrk+0x64>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <_sbrk+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d207      	bcs.n	8002254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002244:	f002 f88c 	bl	8004360 <__errno>
 8002248:	4603      	mov	r3, r0
 800224a:	220c      	movs	r2, #12
 800224c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002252:	e009      	b.n	8002268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_sbrk+0x64>)
 8002264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20005000 	.word	0x20005000
 8002274:	00000400 	.word	0x00000400
 8002278:	20000ac8 	.word	0x20000ac8
 800227c:	20000ae0 	.word	0x20000ae0

08002280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0a5a      	lsrs	r2, r3, #9
 800229c:	490f      	ldr	r1, [pc, #60]	; (80022dc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800229e:	fba1 1202 	umull	r1, r2, r1, r2
 80022a2:	09d2      	lsrs	r2, r2, #7
 80022a4:	490e      	ldr	r1, [pc, #56]	; (80022e0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80022a6:	fb01 f202 	mul.w	r2, r1, r2
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	09db      	lsrs	r3, r3, #7
 80022bc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	441a      	add	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	00044b83 	.word	0x00044b83
 80022e0:	3b9aca00 	.word	0x3b9aca00

080022e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e6:	490d      	ldr	r1, [pc, #52]	; (800231c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022fc:	4c0a      	ldr	r4, [pc, #40]	; (8002328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800230a:	f7ff ffb9 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f002 f82d 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7fd ff23 	bl	800015c <main>
  bx lr
 8002316:	4770      	bx	lr
  ldr r0, =_sdata
 8002318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800231c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002320:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8002324:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002328:	20000ae0 	.word	0x20000ae0

0800232c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800232c:	e7fe      	b.n	800232c <ADC1_2_IRQHandler>
	...

08002330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_Init+0x28>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_Init+0x28>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f947 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	200f      	movs	r0, #15
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fe1c 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f95f 	bl	800263e <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002398:	f000 f927 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000010 	.word	0x20000010
 80023b4:	20000018 	.word	0x20000018
 80023b8:	20000014 	.word	0x20000014

080023bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x20>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_IncTick+0x20>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000018 	.word	0x20000018
 80023dc:	20000acc 	.word	0x20000acc

080023e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_GetTick+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000acc 	.word	0x20000acc

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffe0 	bl	80023e0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000018 	.word	0x20000018

0800243c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db0b      	blt.n	80024ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4906      	ldr	r1, [pc, #24]	; (80024d4 <__NVIC_EnableIRQ+0x34>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2001      	movs	r0, #1
 80024c2:	fa00 f202 	lsl.w	r2, r0, r2
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	; (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	f7ff ff90 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff2d 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff42 	bl	8002484 <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff90 	bl	800252c <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5f 	bl	80024d8 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff35 	bl	80024a0 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e043      	b.n	80026f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_DMA_Init+0xa8>)
 8002676:	4413      	add	r3, r2
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Init+0xac>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_DMA_Init+0xb0>)
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	bffdfff8 	.word	0xbffdfff8
 8002704:	cccccccd 	.word	0xcccccccd
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_DMA_Start_IT+0x20>
 8002728:	2302      	movs	r3, #2
 800272a:	e04a      	b.n	80027c2 <HAL_DMA_Start_IT+0xb6>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800273a:	2b01      	cmp	r3, #1
 800273c:	d13a      	bne.n	80027b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9e8 	bl	8002b38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 020e 	orr.w	r2, r2, #14
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0204 	bic.w	r2, r2, #4
 8002790:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 020a 	orr.w	r2, r2, #10
 80027a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e005      	b.n	80027c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d008      	beq.n	80027f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2204      	movs	r2, #4
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e020      	b.n	8002834 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020e 	bic.w	r2, r2, #14
 8002800:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002852:	2b02      	cmp	r3, #2
 8002854:	d005      	beq.n	8002862 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2204      	movs	r2, #4
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e051      	b.n	8002906 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020e 	bic.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_DMA_Abort_IT+0xd0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d029      	beq.n	80028e0 <HAL_DMA_Abort_IT+0xa0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_DMA_Abort_IT+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_DMA_Abort_IT+0x9c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_DMA_Abort_IT+0xd8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01a      	beq.n	80028d6 <HAL_DMA_Abort_IT+0x96>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_DMA_Abort_IT+0xdc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d012      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x90>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_DMA_Abort_IT+0xe0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00a      	beq.n	80028ca <HAL_DMA_Abort_IT+0x8a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_DMA_Abort_IT+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d102      	bne.n	80028c4 <HAL_DMA_Abort_IT+0x84>
 80028be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c2:	e00e      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	e00b      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ce:	e008      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	e005      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028da:	e002      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028dc:	2310      	movs	r3, #16
 80028de:	e000      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028e0:	2301      	movs	r3, #1
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_DMA_Abort_IT+0xe8>)
 80028e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
    } 
  }
  return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40020008 	.word	0x40020008
 8002914:	4002001c 	.word	0x4002001c
 8002918:	40020030 	.word	0x40020030
 800291c:	40020044 	.word	0x40020044
 8002920:	40020058 	.word	0x40020058
 8002924:	4002006c 	.word	0x4002006c
 8002928:	40020000 	.word	0x40020000

0800292c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2204      	movs	r2, #4
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d04f      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xc8>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_DMA_IRQHandler+0x1f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d029      	beq.n	80029da <HAL_DMA_IRQHandler+0xae>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_DMA_IRQHandler+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xaa>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a63      	ldr	r2, [pc, #396]	; (8002b24 <HAL_DMA_IRQHandler+0x1f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xa4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a62      	ldr	r2, [pc, #392]	; (8002b28 <HAL_DMA_IRQHandler+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0x9e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a60      	ldr	r2, [pc, #384]	; (8002b2c <HAL_DMA_IRQHandler+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x98>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5f      	ldr	r2, [pc, #380]	; (8002b30 <HAL_DMA_IRQHandler+0x204>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_DMA_IRQHandler+0x92>
 80029b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029bc:	e00e      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c2:	e00b      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c8:	e008      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ce:	e005      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	e002      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	e000      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029da:	2304      	movs	r3, #4
 80029dc:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_DMA_IRQHandler+0x208>)
 80029de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8094 	beq.w	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	e08e      	b.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2202      	movs	r2, #2
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d056      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x186>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d051      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020a 	bic.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a38      	ldr	r2, [pc, #224]	; (8002b1c <HAL_DMA_IRQHandler+0x1f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d029      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x166>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <HAL_DMA_IRQHandler+0x1f4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x162>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <HAL_DMA_IRQHandler+0x1f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x15c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_DMA_IRQHandler+0x1fc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d012      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x156>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <HAL_DMA_IRQHandler+0x200>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x150>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_DMA_IRQHandler+0x204>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x14a>
 8002a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a74:	e00e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	e00b      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a80:	e008      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a86:	e005      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8c:	e002      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a92:	2302      	movs	r3, #2
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_DMA_IRQHandler+0x208>)
 8002a96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d034      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ab0:	e02f      	b.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 020e 	bic.w	r2, r2, #14
 8002ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
    }
  }
  return;
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
}
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40020008 	.word	0x40020008
 8002b20:	4002001c 	.word	0x4002001c
 8002b24:	40020030 	.word	0x40020030
 8002b28:	40020044 	.word	0x40020044
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	4002006c 	.word	0x4002006c
 8002b34:	40020000 	.word	0x40020000

08002b38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d108      	bne.n	8002b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b76:	e007      	b.n	8002b88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b08b      	sub	sp, #44	; 0x2c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba6:	e169      	b.n	8002e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8158 	bne.w	8002e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a9a      	ldr	r2, [pc, #616]	; (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d05e      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bd0:	4a98      	ldr	r2, [pc, #608]	; (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d875      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bd6:	4a98      	ldr	r2, [pc, #608]	; (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d058      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bdc:	4a96      	ldr	r2, [pc, #600]	; (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d86f      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002be2:	4a96      	ldr	r2, [pc, #600]	; (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d052      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002be8:	4a94      	ldr	r2, [pc, #592]	; (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d869      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bee:	4a94      	ldr	r2, [pc, #592]	; (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04c      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bf4:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d863      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bfa:	4a92      	ldr	r2, [pc, #584]	; (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d046      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002c00:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d85d      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d82a      	bhi.n	8002c60 <HAL_GPIO_Init+0xcc>
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d859      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_GPIO_Init+0x80>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c8f 	.word	0x08002c8f
 8002c18:	08002c69 	.word	0x08002c69
 8002c1c:	08002c7b 	.word	0x08002c7b
 8002c20:	08002cbd 	.word	0x08002cbd
 8002c24:	08002cc3 	.word	0x08002cc3
 8002c28:	08002cc3 	.word	0x08002cc3
 8002c2c:	08002cc3 	.word	0x08002cc3
 8002c30:	08002cc3 	.word	0x08002cc3
 8002c34:	08002cc3 	.word	0x08002cc3
 8002c38:	08002cc3 	.word	0x08002cc3
 8002c3c:	08002cc3 	.word	0x08002cc3
 8002c40:	08002cc3 	.word	0x08002cc3
 8002c44:	08002cc3 	.word	0x08002cc3
 8002c48:	08002cc3 	.word	0x08002cc3
 8002c4c:	08002cc3 	.word	0x08002cc3
 8002c50:	08002cc3 	.word	0x08002cc3
 8002c54:	08002cc3 	.word	0x08002cc3
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_GPIO_Init+0x2b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c66:	e02c      	b.n	8002cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	623b      	str	r3, [r7, #32]
          break;
 8002c6e:	e029      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	3304      	adds	r3, #4
 8002c76:	623b      	str	r3, [r7, #32]
          break;
 8002c78:	e024      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e01f      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c96:	2304      	movs	r3, #4
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e013      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
          break;
 8002cae:	e009      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	615a      	str	r2, [r3, #20]
          break;
 8002cba:	e003      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
          break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          break;
 8002cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d801      	bhi.n	8002cce <HAL_GPIO_Init+0x13a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e001      	b.n	8002cd2 <HAL_GPIO_Init+0x13e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_GPIO_Init+0x14c>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x152>
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	3b08      	subs	r3, #8
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	210f      	movs	r1, #15
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80b1 	beq.w	8002e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d14:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a4c      	ldr	r2, [pc, #304]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d2c:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <HAL_GPIO_Init+0x2c0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_GPIO_Init+0x1ec>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_GPIO_Init+0x2c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00d      	beq.n	8002d7c <HAL_GPIO_Init+0x1e8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <HAL_GPIO_Init+0x2c8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <HAL_GPIO_Init+0x1e4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <HAL_GPIO_Init+0x2cc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_GPIO_Init+0x1e0>
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e004      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e002      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d80:	2300      	movs	r3, #0
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	f002 0203 	and.w	r2, r2, #3
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	4093      	lsls	r3, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d92:	492f      	ldr	r1, [pc, #188]	; (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	492c      	ldr	r1, [pc, #176]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4928      	ldr	r1, [pc, #160]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4922      	ldr	r1, [pc, #136]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	491e      	ldr	r1, [pc, #120]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4918      	ldr	r1, [pc, #96]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4914      	ldr	r1, [pc, #80]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d021      	beq.n	8002e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e021      	b.n	8002e76 <HAL_GPIO_Init+0x2e2>
 8002e32:	bf00      	nop
 8002e34:	10320000 	.word	0x10320000
 8002e38:	10310000 	.word	0x10310000
 8002e3c:	10220000 	.word	0x10220000
 8002e40:	10210000 	.word	0x10210000
 8002e44:	10120000 	.word	0x10120000
 8002e48:	10110000 	.word	0x10110000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010800 	.word	0x40010800
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4909      	ldr	r1, [pc, #36]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f ae8e 	bne.w	8002ba8 <HAL_GPIO_Init+0x14>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43d9      	mvns	r1, r3
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	400b      	ands	r3, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	611a      	str	r2, [r3, #16]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e272      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
 8002f38:	4b8c      	ldr	r3, [pc, #560]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06c      	beq.n	800302c <HAL_RCC_OscConfig+0x12c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d168      	bne.n	800302c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e24c      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x76>
 8002f68:	4b80      	ldr	r3, [pc, #512]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7f      	ldr	r2, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7a      	ldr	r2, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a77      	ldr	r2, [pc, #476]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xbc>
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a71      	ldr	r2, [pc, #452]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fa00 	bl	80023e0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7ff f9fc 	bl	80023e0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e200      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe4>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f9ec 	bl	80023e0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff f9e8 	bl	80023e0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1ec      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x10c>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
 8003052:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c0      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4939      	ldr	r1, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7ff f9a1 	bl	80023e0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7ff f99d 	bl	80023e0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a1      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4927      	ldr	r1, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff f980 	bl	80023e0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7ff f97c 	bl	80023e0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e180      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03a      	beq.n	8003184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7ff f960 	bl	80023e0 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff f95c 	bl	80023e0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e160      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f000 fad8 	bl	80036f8 <RCC_Delay>
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7ff f946 	bl	80023e0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7ff f942 	bl	80023e0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d908      	bls.n	8003178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e146      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	42420000 	.word	0x42420000
 8003174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b92      	ldr	r3, [pc, #584]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e9      	bne.n	8003158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a6 	beq.w	80032de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a87      	ldr	r2, [pc, #540]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b7f      	ldr	r3, [pc, #508]	; (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7e      	ldr	r2, [pc, #504]	; (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7ff f903 	bl	80023e0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7ff f8ff 	bl	80023e0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e103      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x312>
 8003204:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a6e      	ldr	r2, [pc, #440]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x334>
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a69      	ldr	r2, [pc, #420]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x356>
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a60      	ldr	r2, [pc, #384]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a5d      	ldr	r2, [pc, #372]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a5a      	ldr	r2, [pc, #360]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6213      	str	r3, [r2, #32]
 8003262:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7ff f8b3 	bl	80023e0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7ff f8af 	bl	80023e0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0b1      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x37e>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7ff f89d 	bl	80023e0 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7ff f899 	bl	80023e0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e09b      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d061      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d146      	bne.n	800338a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7ff f86d 	bl	80023e0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330a:	f7ff f869 	bl	80023e0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e06d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a19      	ldr	r1, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	430b      	orrs	r3, r1
 8003356:	491b      	ldr	r1, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x4cc>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7ff f83d 	bl	80023e0 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7ff f839 	bl	80023e0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e03d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x46a>
 8003388:	e035      	b.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCC_OscConfig+0x4cc>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7ff f826 	bl	80023e0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7ff f822 	bl	80023e0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e026      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x498>
 80033b6:	e01e      	b.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e019      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_OscConfig+0x500>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0d0      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0207 	bic.w	r2, r3, #7
 800342e:	4965      	ldr	r1, [pc, #404]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b8      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	494d      	ldr	r1, [pc, #308]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d040      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e073      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06b      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4936      	ldr	r1, [pc, #216]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe ff74 	bl	80023e0 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe ff70 	bl	80023e0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e053      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d210      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4922      	ldr	r1, [pc, #136]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e032      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4916      	ldr	r1, [pc, #88]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	490e      	ldr	r1, [pc, #56]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003592:	f000 f821 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003596:	4602      	mov	r2, r0
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	490a      	ldr	r1, [pc, #40]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a4:	5ccb      	ldrb	r3, [r1, r3]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fed2 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08004924 	.word	0x08004924
 80035d0:	20000010 	.word	0x20000010
 80035d4:	20000014 	.word	0x20000014

080035d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b490      	push	{r4, r7}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_GetSysClockFreq+0xac>)
 80035e0:	1d3c      	adds	r4, r7, #4
 80035e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e8:	f240 2301 	movw	r3, #513	; 0x201
 80035ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x40>
 8003612:	2b08      	cmp	r3, #8
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x46>
 8003616:	e02b      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_RCC_GetSysClockFreq+0xb4>)
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	e02b      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3328      	adds	r3, #40	; 0x28
 8003628:	443b      	add	r3, r7
 800362a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800362e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d012      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb0>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	0c5b      	lsrs	r3, r3, #17
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	3328      	adds	r3, #40	; 0x28
 8003646:	443b      	add	r3, r7
 8003648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800364c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0e      	ldr	r2, [pc, #56]	; (800368c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e004      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	623b      	str	r3, [r7, #32]
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6a3b      	ldr	r3, [r7, #32]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc90      	pop	{r4, r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	08004840 	.word	0x08004840
 8003688:	40021000 	.word	0x40021000
 800368c:	007a1200 	.word	0x007a1200
 8003690:	003d0900 	.word	0x003d0900

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000010 	.word	0x20000010

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff2 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08004934 	.word	0x08004934

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d4:	f7ff ffde 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0adb      	lsrs	r3, r3, #11
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	08004934 	.word	0x08004934

080036f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <RCC_Delay+0x34>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <RCC_Delay+0x38>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0a5b      	lsrs	r3, r3, #9
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003714:	bf00      	nop
  }
  while (Delay --);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	60fa      	str	r2, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <RCC_Delay+0x1c>
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	20000010 	.word	0x20000010
 8003730:	10624dd3 	.word	0x10624dd3

08003734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03f      	b.n	80037c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fc46 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fd47 	bl	800420c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d153      	bne.n	8003892 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_Transmit_DMA+0x26>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e04c      	b.n	8003894 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UART_Transmit_DMA+0x38>
 8003804:	2302      	movs	r3, #2
 8003806:	e045      	b.n	8003894 <HAL_UART_Transmit_DMA+0xc4>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2221      	movs	r2, #33	; 0x21
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_UART_Transmit_DMA+0xcc>)
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_UART_Transmit_DMA+0xd0>)
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_UART_Transmit_DMA+0xd4>)
 8003846:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	2200      	movs	r2, #0
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3304      	adds	r3, #4
 8003864:	461a      	mov	r2, r3
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	f7fe ff50 	bl	800270c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003874:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800388c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
  }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08003ca9 	.word	0x08003ca9
 80038a0:	08003cfb 	.word	0x08003cfb
 80038a4:	08003de3 	.word	0x08003de3

080038a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d11d      	bne.n	80038fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Receive_DMA+0x26>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e016      	b.n	8003900 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Receive_DMA+0x38>
 80038dc:	2302      	movs	r3, #2
 80038de:	e00f      	b.n	8003900 <HAL_UART_Receive_DMA+0x58>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fabf 	bl	8003e78 <UART_Start_Receive_DMA>
 80038fa:	4603      	mov	r3, r0
 80038fc:	e000      	b.n	8003900 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_UART_IRQHandler+0x52>
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fbb0 	bl	80040b8 <UART_Receive_IT>
      return;
 8003958:	e17b      	b.n	8003c52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80b1 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x1bc>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_UART_IRQHandler+0x70>
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_UART_IRQHandler+0x90>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_UART_IRQHandler+0xb0>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0202 	orr.w	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_UART_IRQHandler+0xd0>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <HAL_UART_IRQHandler+0xfa>
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_UART_IRQHandler+0xee>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0208 	orr.w	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 811e 	beq.w	8003c48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_UART_IRQHandler+0x11e>
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb49 	bl	80040b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_UART_IRQHandler+0x146>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d031      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa8b 	bl	8003f6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d023      	beq.n	8003aaa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	4a76      	ldr	r2, [pc, #472]	; (8003c58 <HAL_UART_IRQHandler+0x350>)
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe feda 	bl	8002840 <HAL_DMA_Abort_IT>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e00e      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ec 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00a      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8e8 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e006      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8e4 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003abe:	e0c3      	b.n	8003c48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	bf00      	nop
    return;
 8003ac2:	e0c1      	b.n	8003c48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 80a1 	bne.w	8003c10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 809b 	beq.w	8003c10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8095 	beq.w	8003c10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04e      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b14:	8a3b      	ldrh	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8098 	beq.w	8003c4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b20:	8a3a      	ldrh	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f080 8092 	bcs.w	8003c4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8a3a      	ldrh	r2, [r7, #16]
 8003b2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d02b      	beq.n	8003b90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0210 	bic.w	r2, r2, #16
 8003b84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fe1d 	bl	80027ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f876 	bl	8003c92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ba6:	e051      	b.n	8003c4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d047      	beq.n	8003c50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003bc0:	8a7b      	ldrh	r3, [r7, #18]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d044      	beq.n	8003c50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0210 	bic.w	r2, r2, #16
 8003c02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c04:	8a7b      	ldrh	r3, [r7, #18]
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f842 	bl	8003c92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c0e:	e01f      	b.n	8003c50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_UART_IRQHandler+0x324>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f9e0 	bl	8003fea <UART_Transmit_IT>
    return;
 8003c2a:	e012      	b.n	8003c52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_UART_IRQHandler+0x34a>
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fa21 	bl	8004088 <UART_EndTransmit_IT>
    return;
 8003c46:	e004      	b.n	8003c52 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c48:	bf00      	nop
 8003c4a:	e002      	b.n	8003c52 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c50:	bf00      	nop
  }
}
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003fc3 	.word	0x08003fc3

08003c5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d113      	bne.n	8003cec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cea:	e002      	b.n	8003cf2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7fd fbed 	bl	80014cc <HAL_UART_TxCpltCallback>
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ffa7 	bl	8003c5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d12a      	bne.n	8003d88 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d46:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0210 	bic.w	r2, r2, #16
 8003d86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d94:	4619      	mov	r1, r3
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff ff7b 	bl	8003c92 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d9c:	e002      	b.n	8003da4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7fd fba6 	bl	80014f0 <HAL_UART_RxCpltCallback>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d108      	bne.n	8003dd4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4619      	mov	r1, r3
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff60 	bl	8003c92 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dd2:	e002      	b.n	8003dda <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff ff4a 	bl	8003c6e <HAL_UART_RxHalfCpltCallback>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b21      	cmp	r3, #33	; 0x21
 8003e14:	d108      	bne.n	8003e28 <UART_DMAError+0x46>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e22:	68b8      	ldr	r0, [r7, #8]
 8003e24:	f000 f88c 	bl	8003f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b22      	cmp	r3, #34	; 0x22
 8003e48:	d108      	bne.n	8003e5c <UART_DMAError+0x7a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e56:	68b8      	ldr	r0, [r7, #8]
 8003e58:	f000 f887 	bl	8003f6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0210 	orr.w	r2, r3, #16
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e68:	68b8      	ldr	r0, [r7, #8]
 8003e6a:	f7ff ff09 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2222      	movs	r2, #34	; 0x22
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <UART_Start_Receive_DMA+0xbc>)
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <UART_Start_Receive_DMA+0xc0>)
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <UART_Start_Receive_DMA+0xc4>)
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	f7fe fc18 	bl	800270c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f28:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	08003d17 	.word	0x08003d17
 8003f38:	08003dad 	.word	0x08003dad
 8003f3c:	08003de3 	.word	0x08003de3

08003f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f56:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0210 	bic.w	r2, r2, #16
 8003fa8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fe4f 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b21      	cmp	r3, #33	; 0x21
 8003ffc:	d13e      	bne.n	800407c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d114      	bne.n	8004032 <UART_Transmit_IT+0x48>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d110      	bne.n	8004032 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	e008      	b.n	8004044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6211      	str	r1, [r2, #32]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4619      	mov	r1, r3
 8004052:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10f      	bne.n	8004078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fd fa0f 	bl	80014cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	f040 8099 	bne.w	8004200 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d117      	bne.n	8004108 <UART_Receive_IT+0x50>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d113      	bne.n	8004108 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
 8004106:	e026      	b.n	8004156 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d007      	beq.n	800412c <UART_Receive_IT+0x74>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <UART_Receive_IT+0x82>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e008      	b.n	800414c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004146:	b2da      	uxtb	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4619      	mov	r1, r3
 8004164:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004166:	2b00      	cmp	r3, #0
 8004168:	d148      	bne.n	80041fc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d123      	bne.n	80041f2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0210 	bic.w	r2, r2, #16
 80041be:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d10a      	bne.n	80041e4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fd51 	bl	8003c92 <HAL_UARTEx_RxEventCallback>
 80041f0:	e002      	b.n	80041f8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd f97c 	bl	80014f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e002      	b.n	8004202 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004246:	f023 030c 	bic.w	r3, r3, #12
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	430b      	orrs	r3, r1
 8004252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <UART_SetConfig+0x114>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d103      	bne.n	800427c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004274:	f7ff fa2c 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	e002      	b.n	8004282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7ff fa14 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8004280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	4a22      	ldr	r2, [pc, #136]	; (8004324 <UART_SetConfig+0x118>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	0119      	lsls	r1, r3, #4
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009a      	lsls	r2, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <UART_SetConfig+0x118>)
 80042ba:	fba3 0302 	umull	r0, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2064      	movs	r0, #100	; 0x64
 80042c2:	fb00 f303 	mul.w	r3, r0, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	3332      	adds	r3, #50	; 0x32
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <UART_SetConfig+0x118>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	4419      	add	r1, r3
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <UART_SetConfig+0x118>)
 80042f2:	fba3 0302 	umull	r0, r3, r3, r2
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2064      	movs	r0, #100	; 0x64
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	3332      	adds	r3, #50	; 0x32
 8004304:	4a07      	ldr	r2, [pc, #28]	; (8004324 <UART_SetConfig+0x118>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	f003 020f 	and.w	r2, r3, #15
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	440a      	add	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40013800 	.word	0x40013800
 8004324:	51eb851f 	.word	0x51eb851f

08004328 <__cxa_pure_virtual>:
 8004328:	b508      	push	{r3, lr}
 800432a:	f000 f80d 	bl	8004348 <_ZSt9terminatev>

0800432e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800432e:	b508      	push	{r3, lr}
 8004330:	4780      	blx	r0
 8004332:	f000 f80e 	bl	8004352 <abort>
	...

08004338 <_ZSt13get_terminatev>:
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <_ZSt13get_terminatev+0xc>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	f3bf 8f5b 	dmb	ish
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000001c 	.word	0x2000001c

08004348 <_ZSt9terminatev>:
 8004348:	b508      	push	{r3, lr}
 800434a:	f7ff fff5 	bl	8004338 <_ZSt13get_terminatev>
 800434e:	f7ff ffee 	bl	800432e <_ZN10__cxxabiv111__terminateEPFvvE>

08004352 <abort>:
 8004352:	2006      	movs	r0, #6
 8004354:	b508      	push	{r3, lr}
 8004356:	f000 f873 	bl	8004440 <raise>
 800435a:	2001      	movs	r0, #1
 800435c:	f7fd ff4f 	bl	80021fe <_exit>

08004360 <__errno>:
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <__errno+0x8>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000020 	.word	0x20000020

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	2600      	movs	r6, #0
 8004370:	4d0c      	ldr	r5, [pc, #48]	; (80043a4 <__libc_init_array+0x38>)
 8004372:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004374:	1b64      	subs	r4, r4, r5
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	f000 f9ae 	bl	80046dc <_init>
 8004380:	2600      	movs	r6, #0
 8004382:	4d0a      	ldr	r5, [pc, #40]	; (80043ac <__libc_init_array+0x40>)
 8004384:	4c0a      	ldr	r4, [pc, #40]	; (80043b0 <__libc_init_array+0x44>)
 8004386:	1b64      	subs	r4, r4, r5
 8004388:	10a4      	asrs	r4, r4, #2
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	0800493c 	.word	0x0800493c
 80043a8:	0800493c 	.word	0x0800493c
 80043ac:	0800493c 	.word	0x0800493c
 80043b0:	08004944 	.word	0x08004944

080043b4 <memcpy>:
 80043b4:	440a      	add	r2, r1
 80043b6:	4291      	cmp	r1, r2
 80043b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043bc:	d100      	bne.n	80043c0 <memcpy+0xc>
 80043be:	4770      	bx	lr
 80043c0:	b510      	push	{r4, lr}
 80043c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043c6:	4291      	cmp	r1, r2
 80043c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043cc:	d1f9      	bne.n	80043c2 <memcpy+0xe>
 80043ce:	bd10      	pop	{r4, pc}

080043d0 <memset>:
 80043d0:	4603      	mov	r3, r0
 80043d2:	4402      	add	r2, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <realloc>:
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <realloc+0xc>)
 80043e2:	460a      	mov	r2, r1
 80043e4:	4601      	mov	r1, r0
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	f000 b8da 	b.w	80045a0 <_realloc_r>
 80043ec:	20000020 	.word	0x20000020

080043f0 <_raise_r>:
 80043f0:	291f      	cmp	r1, #31
 80043f2:	b538      	push	{r3, r4, r5, lr}
 80043f4:	4604      	mov	r4, r0
 80043f6:	460d      	mov	r5, r1
 80043f8:	d904      	bls.n	8004404 <_raise_r+0x14>
 80043fa:	2316      	movs	r3, #22
 80043fc:	6003      	str	r3, [r0, #0]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004406:	b112      	cbz	r2, 800440e <_raise_r+0x1e>
 8004408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800440c:	b94b      	cbnz	r3, 8004422 <_raise_r+0x32>
 800440e:	4620      	mov	r0, r4
 8004410:	f000 f830 	bl	8004474 <_getpid_r>
 8004414:	462a      	mov	r2, r5
 8004416:	4601      	mov	r1, r0
 8004418:	4620      	mov	r0, r4
 800441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800441e:	f000 b817 	b.w	8004450 <_kill_r>
 8004422:	2b01      	cmp	r3, #1
 8004424:	d00a      	beq.n	800443c <_raise_r+0x4c>
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	d103      	bne.n	8004432 <_raise_r+0x42>
 800442a:	2316      	movs	r3, #22
 800442c:	6003      	str	r3, [r0, #0]
 800442e:	2001      	movs	r0, #1
 8004430:	e7e7      	b.n	8004402 <_raise_r+0x12>
 8004432:	2400      	movs	r4, #0
 8004434:	4628      	mov	r0, r5
 8004436:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800443a:	4798      	blx	r3
 800443c:	2000      	movs	r0, #0
 800443e:	e7e0      	b.n	8004402 <_raise_r+0x12>

08004440 <raise>:
 8004440:	4b02      	ldr	r3, [pc, #8]	; (800444c <raise+0xc>)
 8004442:	4601      	mov	r1, r0
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	f7ff bfd3 	b.w	80043f0 <_raise_r>
 800444a:	bf00      	nop
 800444c:	20000020 	.word	0x20000020

08004450 <_kill_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	2300      	movs	r3, #0
 8004454:	4d06      	ldr	r5, [pc, #24]	; (8004470 <_kill_r+0x20>)
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	f7fd febe 	bl	80021de <_kill>
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	d102      	bne.n	800446c <_kill_r+0x1c>
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	b103      	cbz	r3, 800446c <_kill_r+0x1c>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd38      	pop	{r3, r4, r5, pc}
 800446e:	bf00      	nop
 8004470:	20000ad8 	.word	0x20000ad8

08004474 <_getpid_r>:
 8004474:	f7fd beac 	b.w	80021d0 <_getpid>

08004478 <sbrk_aligned>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4e0e      	ldr	r6, [pc, #56]	; (80044b4 <sbrk_aligned+0x3c>)
 800447c:	460c      	mov	r4, r1
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	4605      	mov	r5, r0
 8004482:	b911      	cbnz	r1, 800448a <sbrk_aligned+0x12>
 8004484:	f000 f8bc 	bl	8004600 <_sbrk_r>
 8004488:	6030      	str	r0, [r6, #0]
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f8b7 	bl	8004600 <_sbrk_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d00a      	beq.n	80044ac <sbrk_aligned+0x34>
 8004496:	1cc4      	adds	r4, r0, #3
 8004498:	f024 0403 	bic.w	r4, r4, #3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d007      	beq.n	80044b0 <sbrk_aligned+0x38>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 f8ac 	bl	8004600 <_sbrk_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d101      	bne.n	80044b0 <sbrk_aligned+0x38>
 80044ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044b0:	4620      	mov	r0, r4
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	20000ad4 	.word	0x20000ad4

080044b8 <_malloc_r>:
 80044b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	1ccd      	adds	r5, r1, #3
 80044be:	f025 0503 	bic.w	r5, r5, #3
 80044c2:	3508      	adds	r5, #8
 80044c4:	2d0c      	cmp	r5, #12
 80044c6:	bf38      	it	cc
 80044c8:	250c      	movcc	r5, #12
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	4607      	mov	r7, r0
 80044ce:	db01      	blt.n	80044d4 <_malloc_r+0x1c>
 80044d0:	42a9      	cmp	r1, r5
 80044d2:	d905      	bls.n	80044e0 <_malloc_r+0x28>
 80044d4:	230c      	movs	r3, #12
 80044d6:	2600      	movs	r6, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4630      	mov	r0, r6
 80044dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e0:	4e2e      	ldr	r6, [pc, #184]	; (800459c <_malloc_r+0xe4>)
 80044e2:	f000 f89d 	bl	8004620 <__malloc_lock>
 80044e6:	6833      	ldr	r3, [r6, #0]
 80044e8:	461c      	mov	r4, r3
 80044ea:	bb34      	cbnz	r4, 800453a <_malloc_r+0x82>
 80044ec:	4629      	mov	r1, r5
 80044ee:	4638      	mov	r0, r7
 80044f0:	f7ff ffc2 	bl	8004478 <sbrk_aligned>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	4604      	mov	r4, r0
 80044f8:	d14d      	bne.n	8004596 <_malloc_r+0xde>
 80044fa:	6834      	ldr	r4, [r6, #0]
 80044fc:	4626      	mov	r6, r4
 80044fe:	2e00      	cmp	r6, #0
 8004500:	d140      	bne.n	8004584 <_malloc_r+0xcc>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4631      	mov	r1, r6
 8004506:	4638      	mov	r0, r7
 8004508:	eb04 0803 	add.w	r8, r4, r3
 800450c:	f000 f878 	bl	8004600 <_sbrk_r>
 8004510:	4580      	cmp	r8, r0
 8004512:	d13a      	bne.n	800458a <_malloc_r+0xd2>
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	3503      	adds	r5, #3
 8004518:	1a6d      	subs	r5, r5, r1
 800451a:	f025 0503 	bic.w	r5, r5, #3
 800451e:	3508      	adds	r5, #8
 8004520:	2d0c      	cmp	r5, #12
 8004522:	bf38      	it	cc
 8004524:	250c      	movcc	r5, #12
 8004526:	4638      	mov	r0, r7
 8004528:	4629      	mov	r1, r5
 800452a:	f7ff ffa5 	bl	8004478 <sbrk_aligned>
 800452e:	3001      	adds	r0, #1
 8004530:	d02b      	beq.n	800458a <_malloc_r+0xd2>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	442b      	add	r3, r5
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	e00e      	b.n	8004558 <_malloc_r+0xa0>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	1b52      	subs	r2, r2, r5
 800453e:	d41e      	bmi.n	800457e <_malloc_r+0xc6>
 8004540:	2a0b      	cmp	r2, #11
 8004542:	d916      	bls.n	8004572 <_malloc_r+0xba>
 8004544:	1961      	adds	r1, r4, r5
 8004546:	42a3      	cmp	r3, r4
 8004548:	6025      	str	r5, [r4, #0]
 800454a:	bf18      	it	ne
 800454c:	6059      	strne	r1, [r3, #4]
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	bf08      	it	eq
 8004552:	6031      	streq	r1, [r6, #0]
 8004554:	5162      	str	r2, [r4, r5]
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	4638      	mov	r0, r7
 800455a:	f104 060b 	add.w	r6, r4, #11
 800455e:	f000 f865 	bl	800462c <__malloc_unlock>
 8004562:	f026 0607 	bic.w	r6, r6, #7
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	1af2      	subs	r2, r6, r3
 800456a:	d0b6      	beq.n	80044da <_malloc_r+0x22>
 800456c:	1b9b      	subs	r3, r3, r6
 800456e:	50a3      	str	r3, [r4, r2]
 8004570:	e7b3      	b.n	80044da <_malloc_r+0x22>
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	42a3      	cmp	r3, r4
 8004576:	bf0c      	ite	eq
 8004578:	6032      	streq	r2, [r6, #0]
 800457a:	605a      	strne	r2, [r3, #4]
 800457c:	e7ec      	b.n	8004558 <_malloc_r+0xa0>
 800457e:	4623      	mov	r3, r4
 8004580:	6864      	ldr	r4, [r4, #4]
 8004582:	e7b2      	b.n	80044ea <_malloc_r+0x32>
 8004584:	4634      	mov	r4, r6
 8004586:	6876      	ldr	r6, [r6, #4]
 8004588:	e7b9      	b.n	80044fe <_malloc_r+0x46>
 800458a:	230c      	movs	r3, #12
 800458c:	4638      	mov	r0, r7
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	f000 f84c 	bl	800462c <__malloc_unlock>
 8004594:	e7a1      	b.n	80044da <_malloc_r+0x22>
 8004596:	6025      	str	r5, [r4, #0]
 8004598:	e7de      	b.n	8004558 <_malloc_r+0xa0>
 800459a:	bf00      	nop
 800459c:	20000ad0 	.word	0x20000ad0

080045a0 <_realloc_r>:
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4680      	mov	r8, r0
 80045a6:	4614      	mov	r4, r2
 80045a8:	460e      	mov	r6, r1
 80045aa:	b921      	cbnz	r1, 80045b6 <_realloc_r+0x16>
 80045ac:	4611      	mov	r1, r2
 80045ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	f7ff bf81 	b.w	80044b8 <_malloc_r>
 80045b6:	b92a      	cbnz	r2, 80045c4 <_realloc_r+0x24>
 80045b8:	f000 f83e 	bl	8004638 <_free_r>
 80045bc:	4625      	mov	r5, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c4:	f000 f880 	bl	80046c8 <_malloc_usable_size_r>
 80045c8:	4284      	cmp	r4, r0
 80045ca:	4607      	mov	r7, r0
 80045cc:	d802      	bhi.n	80045d4 <_realloc_r+0x34>
 80045ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045d2:	d812      	bhi.n	80045fa <_realloc_r+0x5a>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4640      	mov	r0, r8
 80045d8:	f7ff ff6e 	bl	80044b8 <_malloc_r>
 80045dc:	4605      	mov	r5, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0ed      	beq.n	80045be <_realloc_r+0x1e>
 80045e2:	42bc      	cmp	r4, r7
 80045e4:	4622      	mov	r2, r4
 80045e6:	4631      	mov	r1, r6
 80045e8:	bf28      	it	cs
 80045ea:	463a      	movcs	r2, r7
 80045ec:	f7ff fee2 	bl	80043b4 <memcpy>
 80045f0:	4631      	mov	r1, r6
 80045f2:	4640      	mov	r0, r8
 80045f4:	f000 f820 	bl	8004638 <_free_r>
 80045f8:	e7e1      	b.n	80045be <_realloc_r+0x1e>
 80045fa:	4635      	mov	r5, r6
 80045fc:	e7df      	b.n	80045be <_realloc_r+0x1e>
	...

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	2300      	movs	r3, #0
 8004604:	4d05      	ldr	r5, [pc, #20]	; (800461c <_sbrk_r+0x1c>)
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fd fe02 	bl	8002214 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000ad8 	.word	0x20000ad8

08004620 <__malloc_lock>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__malloc_lock+0x8>)
 8004622:	f000 b859 	b.w	80046d8 <__retarget_lock_acquire_recursive>
 8004626:	bf00      	nop
 8004628:	20000adc 	.word	0x20000adc

0800462c <__malloc_unlock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_unlock+0x8>)
 800462e:	f000 b854 	b.w	80046da <__retarget_lock_release_recursive>
 8004632:	bf00      	nop
 8004634:	20000adc 	.word	0x20000adc

08004638 <_free_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4605      	mov	r5, r0
 800463c:	2900      	cmp	r1, #0
 800463e:	d040      	beq.n	80046c2 <_free_r+0x8a>
 8004640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004644:	1f0c      	subs	r4, r1, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfb8      	it	lt
 800464a:	18e4      	addlt	r4, r4, r3
 800464c:	f7ff ffe8 	bl	8004620 <__malloc_lock>
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <_free_r+0x8c>)
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	b933      	cbnz	r3, 8004664 <_free_r+0x2c>
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	6014      	str	r4, [r2, #0]
 800465a:	4628      	mov	r0, r5
 800465c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004660:	f7ff bfe4 	b.w	800462c <__malloc_unlock>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d908      	bls.n	800467a <_free_r+0x42>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf01      	itttt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	1809      	addeq	r1, r1, r0
 8004676:	6021      	streq	r1, [r4, #0]
 8004678:	e7ed      	b.n	8004656 <_free_r+0x1e>
 800467a:	461a      	mov	r2, r3
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b10b      	cbz	r3, 8004684 <_free_r+0x4c>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d9fa      	bls.n	800467a <_free_r+0x42>
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	1850      	adds	r0, r2, r1
 8004688:	42a0      	cmp	r0, r4
 800468a:	d10b      	bne.n	80046a4 <_free_r+0x6c>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	4401      	add	r1, r0
 8004690:	1850      	adds	r0, r2, r1
 8004692:	4283      	cmp	r3, r0
 8004694:	6011      	str	r1, [r2, #0]
 8004696:	d1e0      	bne.n	800465a <_free_r+0x22>
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4401      	add	r1, r0
 800469e:	6011      	str	r1, [r2, #0]
 80046a0:	6053      	str	r3, [r2, #4]
 80046a2:	e7da      	b.n	800465a <_free_r+0x22>
 80046a4:	d902      	bls.n	80046ac <_free_r+0x74>
 80046a6:	230c      	movs	r3, #12
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	e7d6      	b.n	800465a <_free_r+0x22>
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	1821      	adds	r1, r4, r0
 80046b0:	428b      	cmp	r3, r1
 80046b2:	bf01      	itttt	eq
 80046b4:	6819      	ldreq	r1, [r3, #0]
 80046b6:	685b      	ldreq	r3, [r3, #4]
 80046b8:	1809      	addeq	r1, r1, r0
 80046ba:	6021      	streq	r1, [r4, #0]
 80046bc:	6063      	str	r3, [r4, #4]
 80046be:	6054      	str	r4, [r2, #4]
 80046c0:	e7cb      	b.n	800465a <_free_r+0x22>
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000ad0 	.word	0x20000ad0

080046c8 <_malloc_usable_size_r>:
 80046c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046cc:	1f18      	subs	r0, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfbc      	itt	lt
 80046d2:	580b      	ldrlt	r3, [r1, r0]
 80046d4:	18c0      	addlt	r0, r0, r3
 80046d6:	4770      	bx	lr

080046d8 <__retarget_lock_acquire_recursive>:
 80046d8:	4770      	bx	lr

080046da <__retarget_lock_release_recursive>:
 80046da:	4770      	bx	lr

080046dc <_init>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	bf00      	nop
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr

080046e8 <_fini>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr
